# -*- coding: utf-8 -*-
"""fpl app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1isu6abhQ4WocCacZr6-E4eA6A6teFTcw
"""

import ipywidgets as widgets
from IPython.display import display
import datetime

# Joy Bar (golden vertical scale with glow pulse)
def make_joy_bar_html(value):
    val = max(0, min(value, 10))
    height_percent = (val / 10) * 100
    html_content = f"""
    <style>
      @keyframes pulse-glow {{
        0% {{ box-shadow: 0 0 20px 8px #ffd700cc; }}
        50% {{ box-shadow: 0 0 30px 15px #fff8a0cc; }}
        100% {{ box-shadow: 0 0 20px 8px #ffd700cc; }}
      }}
      .joybar-container {{
          width: 70px;
          height: 700px;
          background: #000;
          border-radius: 20px;
          box-shadow: inset 0 0 15px 6px #ffd700aa;
          position: relative;
          margin: auto;
          overflow: hidden;
      }}
      .joybar-fill {{
          position: absolute;
          bottom: 0;
          width: 100%;
          height: {height_percent}%;
          background: linear-gradient(to top, #FFD700, #FFFACD);
          border-radius: 20px 20px 0 0;
          animation: pulse-glow 2.5s ease-in-out infinite;
      }}
      .joy-label {{
          font-family: 'Arial Black', Arial, sans-serif;
          color: #FFD700CC;
          font-size: 22px;
          text-align: center;
          margin-bottom: 12px;
          user-select: none;
          letter-spacing: 3px;
      }}
    </style>
    <div class="joy-label">JOY</div>
    <div class="joybar-container">
      <div class="joybar-fill"></div>
    </div>
    """
    return widgets.HTML(value=html_content, layout=widgets.Layout(width='70px', height='700px'))

# Left-aligned title and subtitle
app_title = widgets.HTML("""
    <div style='font-family: Arial Black, sans-serif; color:Black;'>
        <h2>Feelgood Pleasure Lovejoy App</h2>
        <p style='font-family:Arial;'>All is means to joy | Joy = üëë</p>
    </div>
""")

# Joy Level input
joy_input = widgets.BoundedFloatText(
    value=5.0, min=0.0, max=10.0, step=0.01, description='', layout=widgets.Layout(width='110px')
)

joy_bar = make_joy_bar_html(joy_input.value)

def on_joy_change(change):
    new_bar = make_joy_bar_html(change['new'])
    left_panel.children = [new_bar]

joy_input.observe(on_joy_change, names='value')

# Store entries references
big_lever_entries = []
joy10_entries = []
joy10_hammer_buttons = []

def update_hammer_buttons_state():
    active = len(big_lever_entries) < 2
    for btn in joy10_hammer_buttons:
        btn.disabled = not active
        btn.style.button_color = '#ffc107' if active else '#999999'

def add_big_lever_entry(text):
    text = text.strip()
    if not text:
        return
    if len(big_lever_entries) >= 2:
        print("Max 2 Big Lever entries reached.")
        return
    checkbox = widgets.Checkbox(value=False, indent=False, layout=widgets.Layout(width='20px', flex='0 0 auto'))
    label = widgets.Text(value=text, disabled=True, layout=widgets.Layout(width='200px', flex='0 0 auto'))
    delete_btn = widgets.Button(description="üóëÔ∏è", button_style='danger', layout=widgets.Layout(width='30px', flex='0 0 auto', padding='0px', margin='0px'))

    def on_delete_clicked(b):
        big_lever_entries.remove(row)
        big_lever_section.children = [big_lever_section.children[0]] + big_lever_entries
        update_hammer_buttons_state()

    def on_checkbox_change(change):
        if change['new']:
            label.style = {'textDecoration': 'line-through'}
            checkbox.disabled = True

    checkbox.observe(on_checkbox_change, names='value')
    delete_btn.on_click(on_delete_clicked)

    row = widgets.HBox(
        [checkbox, label, delete_btn],
        layout=widgets.Layout(justify_content='flex-start', align_items='center', gap='6px', margin='4px 0')
    )
    big_lever_entries.append(row)
    big_lever_section.children = [big_lever_section.children[0]] + big_lever_entries
    update_hammer_buttons_state()

def create_entry_box(title, color, emoji, can_upgrade=False, has_duration=False,
                     add_button_text=None, placeholder_text=None, create_label=True, create_add_button=True):
    entries = []
    box = widgets.VBox()
    label = None
    if create_label and title != "Now":
        label = widgets.HTML(f"<h3 style='color:{color}; margin-bottom:6px;'>{emoji} {title}</h3>")
    btn_text = add_button_text if add_button_text else f"Add {title} Entry"
    add_btn = None
    if create_add_button:
        add_btn = widgets.Button(description=btn_text, button_style='info')

    def add_entry(b=None):
        text_input = widgets.Text(placeholder=placeholder_text or f"Enter {title.lower()} item", layout=widgets.Layout(width='200px', flex='0 0 auto'))
        checkbox = widgets.Checkbox(value=False, indent=False, layout=widgets.Layout(width='20px', flex='0 0 auto'))
        delete_btn = widgets.Button(description="üóëÔ∏è", button_style='danger', layout=widgets.Layout(width='30px', flex='0 0 auto', padding='0px', margin='0px'))
        upgrade_btn = widgets.Button(description="üî®", button_style='warning', layout=widgets.Layout(width='30px', flex='0 0 auto')) if can_upgrade else None
        duration_dropdown = widgets.Dropdown(options=['once', 'daily', 'weekly'], layout=widgets.Layout(width='90px', flex='0 0 auto')) if has_duration else None
        locked = {'value': False}

        def on_checkbox_change(change):
            if not locked['value']:
                if text_input.value.strip() == '' or (duration_dropdown and duration_dropdown.value is None):
                    return
                locked['value'] = True
                text_input.disabled = True
                if duration_dropdown:
                    duration_dropdown.disabled = True
                checkbox.unobserve(on_checkbox_change, names='value')
                checkbox.value = False
                checkbox.observe(on_checkbox_change, names='value')
            else:
                if title == "10/10 Joy Life":
                    checkbox.disabled = True
                    text_input.style = {'textDecoration': 'line-through'}
                elif title == "Now":
                    if duration_dropdown.value == 'once':
                        row.layout.display = 'none'
                    else:
                        checkbox.disabled = True
                        row._auto_reset = {'type': duration_dropdown.value, 'date': datetime.datetime.now().date()}

        checkbox.observe(on_checkbox_change, names='value')

        def on_delete_clicked(b):
            entries.remove(row)
            box.children = ([label] if label else []) + ([add_btn] if add_btn else []) + entries
            if can_upgrade:
                idx = joy10_entries.index(row)
                joy10_entries.remove(row)
                joy10_hammer_buttons.pop(idx)
                update_hammer_buttons_state()

        delete_btn.on_click(on_delete_clicked)

        def on_upgrade_clicked(b):
            if len(big_lever_entries) >= 2:
                print("Max 2 Big Lever entries reached.")
                return
            text_val = text_input.value.strip()
            if not text_val:
                return
            add_big_lever_entry(text_val)
            idx = entries.index(row)
            entries.remove(row)
            box.children = ([label] if label else []) + ([add_btn] if add_btn else []) + entries
            joy10_hammer_buttons.pop(idx)
            update_hammer_buttons_state()

        children = [text_input]
        if duration_dropdown: children.append(duration_dropdown)
        children += [checkbox, delete_btn]
        if upgrade_btn:
            upgrade_btn.on_click(on_upgrade_clicked)
            children.append(upgrade_btn)
            joy10_hammer_buttons.append(upgrade_btn)

        row = widgets.HBox(children, layout=widgets.Layout(justify_content='flex-start', align_items='center', gap='6px', margin='4px 0'))
        entries.append(row)
        box.children = ([label] if label else []) + ([add_btn] if add_btn else []) + entries

    if create_add_button:
        add_btn.on_click(add_entry)
        box.children = ([label] if label else []) + [add_btn]
    else:
        box.children = ([label] if label else [])

    return box

# Sections
big_lever_section = create_entry_box("Big Lever", "#FFD700", "üî®", create_label=True, create_add_button=False)
joy10_section = create_entry_box("10/10 Joy Life", "purple", "üåπ", can_upgrade=True, placeholder_text="Enter 10/10 item, +how much", add_button_text="Add 10/10 Entry", create_label=False)
joy10_big_lever_title = widgets.HTML("<h3 style='color:purple; margin-bottom:6px;'>üåπ 10/10 Joy Life</h3>")
joy10_entries = joy10_section.children[2:]

now_section = create_entry_box("Now", "#1E90FF", "‚ú®", has_duration=True, add_button_text="Add Joy Chores", placeholder_text="Enter joyres here")

# Layout panels
left_panel = widgets.VBox([joy_bar], layout=widgets.Layout(width='90px'))
now_header = widgets.HBox([widgets.HTML("<b style='color:blue;'>‚ú® Now:</b>"), joy_input], layout=widgets.Layout(margin='8px 0'))

right_panel = widgets.VBox([
    joy10_big_lever_title,
    big_lever_section,
    joy10_section,
    now_header,
    now_section
], layout=widgets.Layout(padding='10px 20px', overflow_y='auto', height='740px'))

main_panel = widgets.HBox([left_panel, right_panel], layout=widgets.Layout(width='100%', height='100%'))

background_box = widgets.VBox([app_title, main_panel], layout=widgets.Layout(
    background_color='#4b0082',
    padding='10px',
    width='100%',
    border_radius='10px'
))

update_hammer_buttons_state()
display(background_box)

from IPython.display import display, HTML

display(HTML("""
<style>
  /* Position the help icon fixed near the scale on left side */
  #fpl-help-icon {
    position: fixed;
    left: 90px;   /* tweak this to align with your scale width */
    bottom: 20px;
    width: 38px;
    height: 38px;
    background: #17a2b8;
    color: white;
    border-radius: 50%;
    font-weight: bold;
    font-size: 28px;
    line-height: 38px;
    text-align: center;
    cursor: pointer;
    z-index: 99999;
    box-shadow: 0 0 12px #17a2b8aa;
    user-select: none;
  }

  /* The modal: centered horizontally, fixed top or near bottom */
  #fpl-help-modal {
    display: none;
    position: fixed;
    left: 50%;
    transform: translateX(-50%);
    bottom: 80px;  /* so it sits just above the ? icon */
    width: 90vw;   /* nearly full width on mobile */
    max-width: 380px;
    max-height: 70vh;
    background: #fffbe6;
    border: 3px solid #FFD700;
    border-radius: 16px;
    box-shadow: 0 0 25px #ffd700aa;
    padding: 20px;
    overflow-y: auto;
    z-index: 100000;
  }

  #fpl-help-close {
    background: #ffc107;
    border: none;
    padding: 6px 12px;
    font-weight: bold;
    border-radius: 8px;
    cursor: pointer;
    margin-top: 10px;
  }

  /* Optional: Make text size more readable on mobile */
  #fpl-help-modal p, #fpl-help-modal ul {
    font-size: 16px;
  }
</style>

<div id="fpl-help-icon" title="Help">?</div>
<div id="fpl-help-modal" role="dialog" aria-modal="true" aria-label="App Usage Instructions">
  <h3 style="margin-top:0;">How to use this app:</h3>
  <p><b>Everything is a means to joy. So joy is the king.</b><br>
  We say it three ways‚Äîfeeling good, pleasure, and loving joy‚Äîto really ground it in.</p>
  <p>On the left you‚Äôll see the joy scale, from 0 to 10. That‚Äôs your visual compass.</p>
  <p><b>Step 1: Describe your 10/10 joy life.</b><br>
  Since all is for joy, perfection = 10/10 joy, not just money, romance, or success.<br>
  Think of the real-life items that make up your personal heaven.<br>
  Hit ‚Äúadd 10/10 entry‚Äù for each one.</p>
  <p><b>Step 2: Rate where you are now.</b><br>
  Based on your 10/10 list, ask: How close am I today? Maybe you're at a 3, 5, 8.<br>
  Enter that number on the scale.</p>
  <p><b>Step 3: Add your ‚Äújoy chores.‚Äù</b><br>
  These are the things that maintain or move your current level‚Äî<br>
  like brushing teeth, doing the dishes, going to the gym, finishing a task.<br>
  Tap ‚Äúadd joy chores‚Äù, and choose whether it‚Äôs daily, weekly, or once.</p>
  <p><b>Step 4: Pick your Big Lever(s).</b><br>
  Now look again at your 10/10 list.<br>
  Which 1 or 2 items would make the biggest positive impact on your score if you focused just on them?<br>
  If you'd like, add a ‚Äú+ number‚Äù after each (like +1.9), based on how much joy they'd add.<br>
  Tap the hammer icon to move them to the Big Lever section.<br>
  This is where you‚Äôll focus most‚Äîjust 1 or 2 items max.</p>
  <p><b>Step 5: Lock it in.</b><br>
  Once everything‚Äôs entered, click each checkbox once to lock in the text and duration.<br>
  After that, checkboxes work normally:</p>
  <ul>
      <li>In 10/10, checked = permanent + strikethrough.</li>
      <li>In Now, one-time tasks disappear when done, recurring ones freeze until the next day/week.</li>
  </ul>
  <p>You can always delete with the trash icon.</p>
  <p><b>A note on growth:</b><br>
  Every time you hit a 9 or 10, it‚Äôs not ‚Äúmission complete‚Äù‚Äîit‚Äôs a new horizon.<br>
  Each peak reveals a higher one, because joy gets richer.<br>
  Your 10/10 at age 5 isn‚Äôt your 10/10 now (no more HoHos and 20-hour video games, right?).<br>
  So: when you hit a high, re-evaluate. What‚Äôs your 10/10 today? Update your entries. Stay fresh. Stay real.<br>
  Some habits may stick around (like brushing your teeth), but joy itself evolves endlessly.<br>
  <b>Joy has no ceiling.</b></p>
  <button id="fpl-help-close">Close</button>
</div>

<script>
  const helpIcon = document.getElementById('fpl-help-icon');
  const helpModal = document.getElementById('fpl-help-modal');
  const helpClose = document.getElementById('fpl-help-close');

  helpIcon.onclick = () => {
    helpModal.style.display = 'block';
  };
  helpClose.onclick = () => {
    helpModal.style.display = 'none';
  };
</script>
"""))